name: release-plz
author: Devolutions Infrastructure Team
description: Update version and changelog based on semantic versioning and conventional commits

branding:
  icon: "zap"
  color: "yellow"

inputs:
  command:
    description: The release-plz command to run
    required: true
  config:
    description: Config file location. If not present, the default 'release-plz.toml' is used
    required: false
  manifest-path:
    description: Path to the Cargo.toml of the project to update
    required: false
  release-plz-version:
    description: release-plz version to use
    default: 0.3.111
    required: false
  cargo-semver-checks-version:
    description: cargo-semver-checks version to use
    default: 0.38.0
    required: false
  registry-token:
    description: Registry token (crates.io, ...)
    required: true
  github-token:
    description: GitHub token
    default: ${{ github.token }}
    required: false
  git-name:
    description: Git author name
    default: github-actions
    required: false
  git-email:
    description: Git author email
    default: github-actions@github.com
    required: false

outputs:
  pr:
    description: The release PR opened by release-plz
    value: ${{ steps.release-plz.outputs.pr }}
  did-open-pr:
    description: Whether release-plz created at least one release PR
    value: ${{ steps.release-plz.outputs.did-open-pr }}
  did-publish:
    description: Whether release-plz released at least one package
    value: ${{ steps.release-plz.outputs.did-publish }}

runs:
  using: composite

  steps:
    - name: Create $HOME/.local/bin
      shell: bash
      run: |
        mkdir --verbose --parents "$HOME/.local/bin"
        echo "$HOME/.local/bin" >> "$GITHUB_PATH"

    - name: Install cargo-semver-checks
      shell: bash
      run: |
        curl "https://github.com/obi1kenobi/cargo-semver-checks/releases/download/v${{ inputs.cargo-semver-checks-version }}/cargo-semver-checks-x86_64-unknown-linux-gnu.tar.gz" --output /tmp/cargo-semver-checks.tar.gz --location 
        tar -xzvf /tmp/cargo-semver-checks.tar.gz -C "$HOME/.local/bin" cargo-semver-checks

    - name: Install release-plz
      shell: bash
      run: |
        curl "https://github.com/release-plz/release-plz/releases/download/release-plz-v${{ inputs.release-plz-version }}/release-plz-x86_64-unknown-linux-gnu.tar.gz" --output /tmp/release-plz.tar.gz --location
        tar -xzvf /tmp/release-plz.tar.gz -C "$HOME/.local/bin" release-plz

    - name: Configure Git user
      shell: bash
      run: |
        git config --global user.name "${{ inputs.git-name }}"
        git config --global user.email "${{ inputs.git-email }}"

    - name: Run release-plz
      id: release-plz
      shell: bash
      run: |
        if [[ -n "${{ inputs.config }}" ]]; then
            echo "using config from '${{ inputs.config }}'"
            # Use arrays so that inputs can contain spaces
            CONFIG_PATH=("--config" "${{ inputs.config }}")
        else
            CONFIG_PATH=()
        fi

        if [[ -n "${{ inputs.registry-token }}" ]]; then
            echo "Custom registry token"
            TOKEN=("--token" "${{ inputs.registry-token }}")
        else
            TOKEN=()
        fi

        if [[ -n "${{ inputs.manifest-path }}" ]]; then
            echo "Manifest path '${{ inputs.manifest-path }}'"
            MANIFEST_PATH=("--manifest-path" "${{ inputs.manifest-path }}")
        else
            MANIFEST_PATH=()
        fi

        if [[ "${{ inputs.command }}" == "release-pr" ]]; then
            echo "Run release-plz release-pr"

            output=$(release-plz release-pr \
                --git-token "${{ inputs.github-token }}" \
                --repo-url "https://github.com/${GITHUB_REPOSITORY}" \
                "${CONFIG_PATH[@]}" \
                "${MANIFEST_PATH[@]}" \
                --output json)

            echo "Output: $output"

            prs=$(echo "$output" | jq -c .prs)
            pr_count=$(echo "$prs" | jq 'length')

            if [ "$pr_count" != "0" ]; then
                did_open_pr=true
                first_pr=$(echo $prs | jq -c .[0])
            else
                did_open_pr=false
                first_pr="{}"
            fi

            echo "did-open-pr=$did_open_pr" >> "$GITHUB_OUTPUT"
            echo "pr=$first_pr" >> "$GITHUB_OUTPUT"
        elif [[ "${{ inputs.command }}" == "release" ]]; then
            echo "Run release-plz release"

            output=$(release-plz release \
                --git-token "${{ inputs.github-token }}" \
                "${CONFIG_PATH[@]}" \
                "${MANIFEST_PATH[@]}" \
                "${TOKEN[@]}" \
                --output json)

            echo "Output: $output"

            releases=$(echo "$output" | jq -c .releases)
            release_count=$(echo "$releases" | jq 'length')

            if [ "$release_count" != "0" ]; then
                did_publish=true
            else
                did_publish=false
            fi

            echo "did-publish=$did_publish" >> "$GITHUB_OUTPUT"
        fi
